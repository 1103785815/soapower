# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /lib/require.js             controllers.WebJarAssets.requirejs

# Enable webjar based resources to be returned
GET     /webjars/*file              controllers.WebJarAssets.at(file)

# Home page
GET     /                           controllers.Assets.at(path="/public", file="index.html")

# Live page
GET     /live/socket                    controllers.Live.socket
GET     /live                           controllers.Live.index(search ?= "")
GET     /live/*search                   controllers.Live.index(search)

# Admin page
POST    /admin/delete                   controllers.Admin.delete
GET     /admin/downloadConfiguration    controllers.Admin.downloadConfiguration
GET     /admin/downloadRequestDataStatsEntries controllers.Admin.downloadRequestDataStatsEntries
POST    /admin/uploadConfiguration      controllers.Admin.uploadConfiguration

# Search page
GET     /search/:environment/:soapAction/:minDate/:maxDate/:status/listDatatable      controllers.Search.listDatatable(environment, soapAction, minDate, maxDate, status, sSearch:String, iDisplayStart: Int, iDisplayLength: Int)

# Analysis page
GET     /analysis/:environment/:soapAction/:minDate/:maxDate/:status/:statsOnly/load/    controllers.Analysis.load(environment, soapAction, minDate, maxDate, status, statsOnly)
GET     /analysis/:environment/:soapAction/:minDate/:maxDate/:status/:statsOnly/         controllers.Analysis.index(environment, soapAction, minDate, maxDate, status, statsOnly)

# Soap
POST    /soap/:environment/*localTarget                  controllers.Soap.index(environment, localTarget)
GET     /replay/:id                                      controllers.Soap.replay(id:Long)

# Services list
GET     /services/listDatatable    controllers.Services.listDatatable

# Add service
POST    /services                  controllers.Services.save

# Edit existing service
GET     /services/:id              controllers.Services.edit(id:Long)
POST    /services/:id              controllers.Services.update(id:Long)

# Delete a service
DELETE    /services/:id            controllers.Services.delete(id:Long)

# Environments list
GET     /environments/options          controllers.Environments.options
GET     /environments/listDatatable    controllers.Environments.listDatatable
GET     /environments                  controllers.Environments.index

# Add environment
GET     /environments/new          controllers.Environments.create
POST    /environments              controllers.Environments.save

# Edit existing environment
GET     /environments/:id          controllers.Environments.edit(id:Long)
POST    /environments/:id          controllers.Environments.update(id:Long)

# Delete a environment
POST    /environments/:id/delete   controllers.Environments.delete(id:Long)

# SoapActions list
GET     /soapactions/findall          controllers.SoapActions.findAll
GET     /soapActions/listDatatable    controllers.SoapActions.listDatatable
GET     /soapActions                  controllers.SoapActions.index

# Regeneration soapAction listDatatable
GET     /soapActions/regenerate   controllers.SoapActions.regenerate

# Edit existing soapAction
GET     /soapActions/:id          controllers.SoapActions.edit(id:Long)
POST    /soapActions/:id          controllers.SoapActions.update(id:Long)

# Status list
GET     /status/findall             controllers.Status.findAll

# Statistics on SoapActions by environments
GET     /statsAsJunit/:minDate/:maxDate/                                             controllers.Stats.statsAsJunit(minDate, maxDate)
GET     /stats/:environment/:soapAction/:minDate/:maxDate/:status/listDatatable      controllers.Stats.listDataTable(environment, minDate, maxDate, soapAction, status)

# Download SOAP request and response
GET     /download/request/:id      controllers.Search.downloadRequest(id:Long, asFile: Boolean ?= false)
GET     /download/response/:id     controllers.Search.downloadResponse(id:Long, asFile: Boolean ?= false)

# Monitoring
GET     /monitor/socket            controllers.Monitor.socket
GET     /monitor                   controllers.Monitor.index
GET     /monitor/downloadLogFile   controllers.Monitor.downloadLogFile
POST    /gc!                       controllers.Monitor.gc

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file              controllers.Assets.at(path="/public", file)

# Map the JS resource paths
GET     /*file                      controllers.Assets.at(path="/public", file)